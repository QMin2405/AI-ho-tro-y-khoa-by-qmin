import { GoogleGenAI, Type } from "@google/genai";
import { QuizDifficulty, type StudyPack, type MCQ } from '../types';
import { useUIStore } from "../store/useUIStore";

// Vite exposes env variables via import.meta.env
const apiKey = process.env.API_KEY;

if (!apiKey) {
    console.warn("API_KEY environment variable not set. Using a mock service.");
}

const ai = new GoogleGenAI({ apiKey: apiKey! });

const studyPackSchema = {
    type: Type.OBJECT,
    properties: {
        title: { type: Type.STRING, description: "M·ªôt ti√™u ƒë·ªÅ ng·∫Øn g·ªçn, h·∫•p d·∫´n cho g√≥i h·ªçc t·∫≠p d·ª±a tr√™n vƒÉn b·∫£n." },
        lesson: {
            type: Type.ARRAY,
            description: "M·ªôt b√†i gi·∫£ng c√≥ c·∫•u tr√∫c, to√†n di·ªán ƒë∆∞·ª£c t·∫°o ra t·ª´ vƒÉn b·∫£n g·ªëc, ƒë∆∞·ª£c l√†m gi√†u b·∫±ng c√°c gi·∫£i th√≠ch chuy√™n s√¢u. B√†i gi·∫£ng n√†y ƒë∆∞·ª£c chia th√†nh c√°c kh·ªëi n·ªôi dung logic ƒë·ªÉ d·ªÖ h·ªçc.",
            items: {
                type: Type.OBJECT,
                properties: {
                    type: { type: Type.STRING, enum: ['heading', 'paragraph', 'tip', 'warning', 'example', 'table'], description: "Lo·∫°i kh·ªëi n·ªôi dung." },
                    content: { type: Type.STRING, description: "N·ªôi dung vƒÉn b·∫£n. ƒê·ªëi v·ªõi b·∫£ng, ƒë√¢y l√† ti√™u ƒë·ªÅ c·ªßa b·∫£ng. Tu√¢n th·ªß c√°c quy t·∫Øc ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong prompt." },
                    tableData: {
                        type: Type.OBJECT,
                        description: "D·ªØ li·ªáu cho b·∫£ng, ch·ªâ s·ª≠ d·ª•ng khi type l√† 'table'.",
                        properties: {
                            headers: { type: Type.ARRAY, items: { type: Type.STRING }, description: "M·∫£ng c√°c chu·ªói cho ti√™u ƒë·ªÅ c·ªôt." },
                            rows: { 
                                type: Type.ARRAY, 
                                description: "M·∫£ng c√°c h√†ng, trong ƒë√≥ m·ªói h√†ng l√† m·ªôt m·∫£ng c√°c chu·ªói.",
                                items: { 
                                    type: Type.ARRAY, 
                                    items: { type: Type.STRING } 
                                } 
                            }
                        },
                        required: ["headers", "rows"]
                    }
                },
                required: ["type", "content"]
            }
        },
        conciseSummary: {
            type: Type.STRING,
            description: "M·ªôt b·∫£n t√≥m t·∫Øt c·ª±c k·ª≥ c√¥ ƒë·ªçng (3-5 g·∫°ch ƒë·∫ßu d√≤ng), ch·ªâ t·∫≠p trung v√†o c√°c ƒëi·ªÉm ch√≠nh v·ªÅ Sinh l√Ω b·ªánh, Ch·∫©n ƒëo√°n v√† ƒêi·ªÅu tr·ªã t·ª´ b√†i gi·∫£ng. B·∫£n t√≥m t·∫Øt n√†y ph·∫£i tu√¢n th·ªß c√°c quy t·∫Øc ƒë·ªãnh d·∫°ng vƒÉn b·∫£n ƒë√£ ch·ªâ ƒë·ªãnh (in ƒë·∫≠m, highlight, v.v.) v√† m·ªói m·ª•c ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng '- '."
        },
        quiz: {
            type: Type.ARRAY,
            description: "T·∫°o 8-12 c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªõi ƒë·ªô kh√≥ kh√°c nhau, bao g·ªìm c·∫£ t√¨nh hu·ªëng l√¢m s√†ng, c√¢u h·ªèi m·ªôt l·ª±a ch·ªçn v√† nhi·ªÅu l·ª±a ch·ªçn.",
            items: {
                type: Type.OBJECT,
                properties: {
                    question: { type: Type.STRING },
                    options: { type: Type.ARRAY, items: { type: Type.STRING } },
                    correctAnswers: { type: Type.ARRAY, items: { type: Type.STRING }, description: "M·ªôt m·∫£ng ch·ª©a (c√°c) c√¢u tr·∫£ l·ªùi ƒë√∫ng." },
                    type: { type: Type.STRING, enum: ['single-choice', 'multiple-choice'], description: "Lo·∫°i c√¢u h·ªèi tr·∫Øc nghi·ªám."},
                    explanation: { type: Type.STRING, description: "M·ªôt l·ªùi gi·∫£i th√≠ch ng·∫Øn g·ªçn cho c√¢u tr·∫£ l·ªùi ƒë√∫ng." },
                    difficulty: { type: Type.STRING, enum: ['Easy', 'Medium', 'Hard'] }
                },
                required: ["question", "options", "correctAnswers", "type", "explanation", "difficulty"]
            }
        },
        fillInTheBlanks: {
            type: Type.ARRAY,
            description: "T·∫°o 5-7 c√¢u h·ªèi ƒëi·ªÅn v√†o ch·ªó tr·ªëng t·∫≠p trung v√†o c√°c thu·∫≠t ng·ªØ ch√≠nh. S·ª≠ d·ª•ng '____' l√†m ch·ªó tr·ªëng.",
            items: {
                type: Type.OBJECT,
                properties: {
                    sentence: { type: Type.STRING },
                    answer: { type: Type.STRING }
                },
                required: ["sentence", "answer"]
            }
        },
        glossary: {
            type: Type.ARRAY,
            description: "M·ªôt danh s√°ch c√°c thu·∫≠t ng·ªØ quan tr·ªçng v√† ƒë·ªãnh nghƒ©a c·ªßa ch√∫ng t·ª´ vƒÉn b·∫£n.",
            items: {
                type: Type.OBJECT,
                properties: {
                    term: { type: Type.STRING },
                    definition: { type: Type.STRING }
                },
                required: ["term", "definition"]
            }
        }
    },
    required: ["title", "lesson", "conciseSummary", "quiz", "fillInTheBlanks", "glossary"]
};

const createMockStudyPack = async (): Promise<Partial<StudyPack>> => {
    await new Promise(res => setTimeout(res, 1500));
    const mockQuiz: MCQ[] = [
        { uniqueId: 'mock_q_1', question: "Nguy√™n nh√¢n ph·ªï bi·∫øn nh·∫•t c·ªßa nh·ªìi m√°u c∆° tim l√† g√¨?", options: ["B√≥c t√°ch ƒë·ªông m·∫°ch ch·ªß", "B·ªánh ƒë·ªông m·∫°ch v√†nh", "Suy tim"], correctAnswers: ["B·ªánh ƒë·ªông m·∫°ch v√†nh"], type: 'single-choice', explanation: "B·ªánh ƒë·ªông m·∫°ch v√†nh d·∫´n ƒë·∫øn x∆° v·ªØa ƒë·ªông m·∫°ch, c√≥ th·ªÉ g√¢y v·ª° m·∫£ng b√°m v√† huy·∫øt kh·ªëi.", difficulty: QuizDifficulty.EASY },
        { uniqueId: 'mock_q_2', question: "Ph√°t hi·ªán n√†o tr√™n ƒëi·ªán t√¢m ƒë·ªì l√† ƒë·∫∑c tr∆∞ng c·ªßa nh·ªìi m√°u c∆° tim xuy√™n th√†nh?", options: ["ST ch√™nh xu·ªëng", "S√≥ng T ƒë·∫£o ng∆∞·ª£c", "ST ch√™nh l√™n"], correctAnswers: ["ST ch√™nh l√™n"], type: 'single-choice', explanation: "ST ch√™nh l√™n cho th·∫•y t·ªïn th∆∞∆°ng to√†n b·ªô b·ªÅ d√†y c·ªßa c∆° tim.", difficulty: QuizDifficulty.MEDIUM },
        { uniqueId: 'mock_q_3', question: "C√°c y·∫øu t·ªë nguy c∆° ch√≠nh c·ªßa b·ªánh ƒë·ªông m·∫°ch v√†nh bao g·ªìm (ch·ªçn t·∫•t c·∫£ c√°c ƒë√°p √°n ƒë√∫ng):", options: ["H√∫t thu·ªëc l√°", "TƒÉng huy·∫øt √°p", "ƒê√°i th√°o ƒë∆∞·ªùng", "U·ªëng nhi·ªÅu n∆∞·ªõc"], correctAnswers: ["H√∫t thu·ªëc l√°", "TƒÉng huy·∫øt √°p", "ƒê√°i th√°o ƒë∆∞·ªùng"], type: 'multiple-choice', explanation: "H√∫t thu·ªëc, tƒÉng huy·∫øt √°p v√† ƒë√°i th√°o ƒë∆∞·ªùng ƒë·ªÅu l√† nh·ªØng y·∫øu t·ªë nguy c∆° ch√≠nh ƒë√£ ƒë∆∞·ª£c ch·ª©ng minh cho b·ªánh ƒë·ªông m·∫°ch v√†nh. U·ªëng nhi·ªÅu n∆∞·ªõc kh√¥ng ph·∫£i l√† m·ªôt y·∫øu t·ªë nguy c∆°.", difficulty: QuizDifficulty.MEDIUM }
    ];
    return {
        title: "B·∫£n nh√°p: T√¨m hi·ªÉu v·ªÅ Nh·ªìi m√°u c∆° tim",
        lesson: [
            { type: "heading", content: "ü©∫ Nh·ªìi m√°u c∆° tim l√† g√¨?" },
            { type: "paragraph", content: "Nh·ªìi m√°u c∆° tim (MI), th∆∞·ªùng ƒë∆∞·ª£c g·ªçi l√† [HL]c∆°n ƒëau tim[/HL], x·∫£y ra khi l∆∞u l∆∞·ª£ng m√°u ƒë·∫øn m·ªôt ph·∫ßn c·ªßa tim b·ªã ch·∫∑n trong m·ªôt th·ªùi gian ƒë·ªß d√†i khi·∫øn m·ªôt ph·∫ßn c∆° tim b·ªã t·ªïn th∆∞∆°ng ho·∫∑c ch·∫øt. Nguy√™n nh√¢n ch√≠nh l√† [DEF term=\"B·ªánh ƒë·ªông m·∫°ch v√†nh (CAD)\"]T√¨nh tr·∫°ng c√°c m·∫£ng b√°m x∆° v·ªØa t√≠ch t·ª• b√™n trong ƒë·ªông m·∫°ch v√†nh, l√†m h·∫πp l√≤ng m·∫°ch v√† gi·∫£m l∆∞u l∆∞·ª£ng m√°u ƒë·∫øn nu√¥i c∆° tim.[/DEF]." },
            { type: "tip", content: "Ghi nh·ªõ t·ª´ vi·∫øt t·∫Øt **MONA** ƒë·ªÉ ƒëi·ªÅu tr·ªã ban ƒë·∫ßu: __Morphine__, __Oxygen__, __Nitroglycerin__, __Aspirin__." },
            { type: "warning", content: "Kh√¥ng d√πng nitroglycerin n·∫øu b·ªánh nh√¢n ƒë√£ d√πng thu·ªëc ·ª©c ch·∫ø phosphodiesterase (v√≠ d·ª•: *sildenafil*) trong v√≤ng 24-48 gi·ªù do nguy c∆° ==h·∫° huy·∫øt √°p nghi√™m tr·ªçng==." },
            { 
                type: "table", 
                content: "Ph√¢n lo·∫°i theo Killip trong Suy tim c·∫•p sau NMCT",
                tableData: {
                    headers: ["Ph√¢n ƒë·ªô", "M√¥ t·∫£ l√¢m s√†ng", "T·ª∑ l·ªá t·ª≠ vong"],
                    rows: [
                        ["I", "Kh√¥ng c√≥ ran ·ªü ph·ªïi, kh√¥ng c√≥ ti·∫øng T3.", "6%"],
                        ["II", "Ran ·ªü ƒë√°y ph·ªïi (‚â§ 50% ph·∫ø tr∆∞·ªùng), c√≥ th·ªÉ c√≥ ti·∫øng T3.", "17%"],
                        ["III", "Ph√π ph·ªïi c·∫•p (ran > 50% ph·∫ø tr∆∞·ªùng).", "38%"],
                        ["IV", "S·ªëc tim (Huy·∫øt √°p t√¢m thu < 90 mmHg, d·∫•u hi·ªáu gi·∫£m t∆∞·ªõi m√°u).", "67%"]
                    ]
                }
            },
            { type: "example", content: "M·ªôt nam b·ªánh nh√¢n 65 tu·ªïi c√≥ bi·ªÉu hi·ªán ƒëau th·∫Øt ng·ª±c sau x∆∞∆°ng ·ª©c lan ra c√°nh tay tr√°i, v√£ m·ªì h√¥i v√† kh√≥ th·ªü. ƒêi·ªán t√¢m ƒë·ªì cho th·∫•y ƒëo·∫°n ST ch√™nh l√™n ·ªü c√°c chuy·ªÉn ƒë·∫°o II, III v√† aVF, cho th·∫•y m·ªôt c∆°n nh·ªìi m√°u c∆° tim th√†nh d∆∞·ªõi." }
        ],
        conciseSummary: "- **Sinh l√Ω b·ªánh**: MI ch·ªß y·∫øu do [HL]B·ªánh ƒë·ªông m·∫°ch v√†nh (CAD)[/HL] g√¢y ra, d·∫´n ƒë·∫øn thi·∫øu m√°u c·ª•c b·ªô c∆° tim.\n- **Ch·∫©n ƒëo√°n**: D·ª±a tr√™n tri·ªáu ch·ª©ng ƒëau ng·ª±c, thay ƒë·ªïi tr√™n ==ƒëi·ªán t√¢m ƒë·ªì (ST ch√™nh l√™n)==, v√† tƒÉng men tim ([HL]Troponin[/HL]).\n- **ƒêi·ªÅu tr·ªã**: C·∫•p c·ª©u bao g·ªìm MONA v√† t√°i t∆∞·ªõi m√°u kh·∫©n c·∫•p b·∫±ng [DEF term=\"PCI\"]Can thi·ªáp m·∫°ch v√†nh qua da.[/DEF] ho·∫∑c thu·ªëc ti√™u s·ª£i huy·∫øt.",
        quiz: mockQuiz,
        originalQuizCount: mockQuiz.length,
        fillInTheBlanks: [{ sentence: "Enzyme ƒë·∫∑c hi·ªáu nh·∫•t cho t·ªïn th∆∞∆°ng c∆° tim l√† ____.", answer: "Troponin" }],
        glossary: [{ term: "Thi·∫øu m√°u c·ª•c b·ªô", definition: "Kh√¥ng ƒë·ªß ngu·ªìn cung c·∫•p m√°u cho m·ªôt c∆° quan ho·∫∑c m·ªôt b·ªô ph·∫≠n c·ªßa c∆° th·ªÉ, ƒë·∫∑c bi·ªát l√† c∆° tim." }]
    };
};

export const createStudyPack = async (source: { text?: string; file?: { data: string, mimeType: string } }): Promise<Partial<StudyPack>> => {
    if (!apiKey) {
        return createMockStudyPack();
    }
    
    try {
        let contents;
        const basePrompt = `B·∫°n l√† m·ªôt chuy√™n gia bi√™n so·∫°n gi√°o tr√¨nh y khoa, chuy√™n t·∫°o ra c√°c c√¢u h·ªèi √¥n t·∫≠p ch·∫•t l∆∞·ª£ng cao theo phong c√°ch AMBOSS. Nhi·ªám v·ª• c·ªßa b·∫°n l√† chuy·ªÉn ƒë·ªïi t√†i li·ªáu y khoa do ng∆∞·ªùi d√πng cung c·∫•p th√†nh m·ªôt G√≥i h·ªçc t·∫≠p to√†n di·ªán b·∫±ng ti·∫øng Vi·ªát, t·∫≠p trung v√†o ki·∫øn th·ª©c "high-yield" v√† kh·∫£ nƒÉng √°p d·ª•ng l√¢m s√†ng. H√£y tu√¢n th·ªß nghi√™m ng·∫∑t c√°c quy t·∫Øc sau:

1.  **Ph√¢n T√≠ch & T·ªïng H·ª£p B√†i Gi·∫£ng:**
    *   X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh v√† c√°c kh√°i ni·ªám c·ªët l√µi.
    *   T√°i c·∫•u tr√∫c th√¥ng tin th√†nh m·ªôt b√†i gi·∫£ng c√≥ logic, d·ªÖ hi·ªÉu. S·ª≠ d·ª•ng ti√™u ƒë·ªÅ, ƒëo·∫°n vƒÉn, b·∫£ng bi·ªÉu, m·∫πo, c·∫£nh b√°o v√† v√≠ d·ª•.
    *   **T·∫°o B·∫£ng T·ª± ƒê·ªông:** N·∫øu n·ªôi dung m√¥ t·∫£ s·ª± so s√°nh (v√≠ d·ª•: so s√°nh hai h·ªôi ch·ª©ng) ho·∫∑c m·ªôt h·ªá th·ªëng ph√¢n lo·∫°i ph·ª©c t·∫°p, B·∫ÆT BU·ªòC ph·∫£i chuy·ªÉn n√≥ th√†nh d·∫°ng b·∫£ng (\`type: 'table'\`) ƒë·ªÉ d·ªÖ so s√°nh.
    *   **ƒê·ªãnh D·∫°ng N·ªôi Dung VƒÉn B·∫£n:** S·ª≠ d·ª•ng c√°c th·∫ª sau ƒë·ªÉ ƒë·ªãnh d·∫°ng vƒÉn b·∫£n trong T·∫§T C·∫¢ c√°c lo·∫°i n·ªôi dung (ƒëo·∫°n vƒÉn, m·∫πo, c·∫£nh b√°o, √¥ b·∫£ng, v.v.):
        *   **In ƒë·∫≠m:** \`**vƒÉn b·∫£n**\`. D√πng cho c√°c thu·∫≠t ng·ªØ r·∫•t quan tr·ªçng ho·∫∑c c√°c ti√™u ƒë·ªÅ ph·ª• trong m·ªôt kh·ªëi vƒÉn b·∫£n.
        *   **In nghi√™ng:** \`*vƒÉn b·∫£n*\`. D√πng ƒë·ªÉ nh·∫•n m·∫°nh ho·∫∑c cho c√°c thu·∫≠t ng·ªØ ti·∫øng n∆∞·ªõc ngo√†i.
        *   **G·∫°ch ch√¢n:** \`__vƒÉn b·∫£n__\`. S·ª≠ d·ª•ng m·ªôt c√°ch ti·∫øt ki·ªám cho s·ª± nh·∫•n m·∫°nh ƒë·∫∑c bi·ªát.
        *   **Highlight:** \`==vƒÉn b·∫£n==\`. D√πng ƒë·ªÉ l√†m n·ªïi b·∫≠t th√¥ng tin "high-yield", c√°c gi√° tr·ªã quan tr·ªçng, ho·∫∑c c√°c ƒëi·ªÉm c·∫ßn ghi nh·ªõ.
        *   **Thu·∫≠t ng·ªØ y khoa (M√†u xanh):** \`[HL]vƒÉn b·∫£n[/HL]\`. D√†nh ri√™ng cho c√°c thu·∫≠t ng·ªØ y khoa ch√≠nh.
        *   **Gi·∫£i th√≠ch thu·∫≠t ng·ªØ (Tooltip):** \`[DEF term="Thu·∫≠t ng·ªØ"]N·ªôi dung gi·∫£i th√≠ch.[/DEF]\`.
    *   **ƒê·ªãnh D·∫°ng C·∫•u Tr√∫c:**
        *   **Ti√™u ƒë·ªÅ (heading):** LU√îN LU√îN b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c (emoji) ph√π h·ª£p v√† m·ªôt d·∫•u c√°ch (v√≠ d·ª•: "ü©∫ Ch·∫©n ƒëo√°n", "üî¨ X√©t nghi·ªám").
        *   **QUY T·∫ÆC GOM NH√ìM N·ªòI DUNG (C·ª∞C K·ª≤ QUAN TR·ªåNG):** Khi t·∫°o m·ªôt kh·ªëi \`tip\`, \`warning\`, ho·∫∑c \`example\`, b·∫°n B·∫ÆT BU·ªòC ph·∫£i g·ªôp TO√ÄN B·ªò n·ªôi dung li√™n quan (bao g·ªìm ti√™u ƒë·ªÅ, ƒëo·∫°n vƒÉn, v√† danh s√°ch) v√†o trong M·ªòT tr∆∞·ªùng \`content\` duy nh·∫•t. TUY·ªÜT ƒê·ªêI kh√¥ng ƒë∆∞·ª£c t√°ch m·ªôt ti√™u ƒë·ªÅ v√† danh s√°ch ƒëi k√®m c·ªßa n√≥ th√†nh hai kh·ªëi ri√™ng bi·ªát.
        *   ƒê·ªëi v·ªõi c√°c lo·∫°i \`tip\`, \`warning\`, v√† \`example\`, **KH√îNG** bao g·ªìm bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c (v√≠ d·ª•: üí°, ‚ö†Ô∏è) trong tr∆∞·ªùng \`content\`. Giao di·ªán ng∆∞·ªùi d√πng s·∫Ω t·ª± ƒë·ªông th√™m ch√∫ng.
        *   **Danh s√°ch (Lists):** ƒê·ªëi v·ªõi c√°c danh s√°ch, LU√îN LU√îN b·∫Øt ƒë·∫ßu m·ªói m·ª•c b·∫±ng m·ªôt d·∫•u g·∫°ch ngang v√† m·ªôt d·∫•u c√°ch (v√≠ d·ª•: \`- M·ª•c 1\`).

2.  **T·∫°o T√≥m t·∫Øt C√¥ ƒë·ªçng (QUAN TR·ªåNG):**
    *   T·ª´ b√†i gi·∫£ng ƒë√£ t·∫°o, h√£y vi·∫øt m·ªôt b·∫£n t√≥m t·∫Øt **c·ª±c k·ª≥ c√¥ ƒë·ªçng** d∆∞·ªõi d·∫°ng danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng (3-5 g·∫°ch ƒë·∫ßu d√≤ng).
    *   M·ªói g·∫°ch ƒë·∫ßu d√≤ng n√™n ch·∫Øt l·ªçc m·ªôt kh√≠a c·∫°nh l√¢m s√†ng quan tr·ªçng: **Sinh l√Ω b·ªánh**, **Ch·∫©n ƒëo√°n**, ho·∫∑c **ƒêi·ªÅu tr·ªã**.
    *   S·ª≠ d·ª•ng c√°c th·∫ª ƒë·ªãnh d·∫°ng (v√≠ d·ª•: \`**vƒÉn b·∫£n**\`, \`==vƒÉn b·∫£n==\`, \`[HL]vƒÉn b·∫£n[/HL]\`) ƒë·ªÉ l√†m n·ªïi b·∫≠t c√°c t·ª´ kh√≥a ch√≠nh trong t√≥m t·∫Øt.
    *   B·∫ÆT ƒê·∫¶U m·ªói m·ª•c trong danh s√°ch b·∫±ng m·ªôt d·∫•u g·∫°ch ngang v√† m·ªôt d·∫•u c√°ch (v√≠ d·ª•: \`- M·ª•c 1\`).

3.  **T·∫°o C√¢u H·ªèi Tr·∫Øc Nghi·ªám (Quiz) ƒêa D·∫°ng:**
    *   **S·ªë l∆∞·ª£ng:** T·∫°o ra 8-12 c√¢u h·ªèi tr·∫Øc nghi·ªám.
    *   **ƒêa d·∫°ng h√≥a:** T·∫°o m·ªôt s·ª± k·∫øt h·ª£p ƒëa d·∫°ng c√°c lo·∫°i c√¢u h·ªèi:
        *   **C√¢u h·ªèi d·ª±a tr√™n ca l√¢m s√†ng (Vignette):** B·∫Øt ƒë·∫ßu c√¢u h·ªèi b·∫±ng m·ªôt k·ªãch b·∫£n l√¢m s√†ng ng·∫Øn g·ªçn (2-4 c√¢u) m√¥ t·∫£ b·ªánh nh√¢n, tri·ªáu ch·ª©ng v√† c√°c ph√°t hi·ªán ban ƒë·∫ßu, sau ƒë√≥ ƒë·∫∑t m·ªôt c√¢u h·ªèi li√™n quan ƒë·∫øn ch·∫©n ƒëo√°n, x√©t nghi·ªám ti·∫øp theo ho·∫∑c ƒëi·ªÅu tr·ªã.
        *   **C√¢u h·ªèi ch·ªçn m·ªôt ƒë√°p √°n ƒë√∫ng (\`type: 'single-choice'\`):** C√¢u h·ªèi tr·∫Øc nghi·ªám ti√™u chu·∫©n.
        *   **C√¢u h·ªèi ch·ªçn nhi·ªÅu ƒë√°p √°n ƒë√∫ng (\`type: 'multiple-choice'\`):** ƒê·∫∑t c√¢u h·ªèi y√™u c·∫ßu "ch·ªçn t·∫•t c·∫£ c√°c ƒë√°p √°n ph√π h·ª£p" ho·∫∑c "ch·ªçn X ƒë√°p √°n ƒë√∫ng".
    *   **QUAN TR·ªåNG (ƒê√°p √°n ƒë√∫ng):** ƒê·ªëi v·ªõi M·ªåI c√¢u h·ªèi, b·∫°n B·∫ÆT BU·ªòC ph·∫£i cung c·∫•p (c√°c) c√¢u tr·∫£ l·ªùi ƒë√∫ng trong m·∫£ng \`correctAnswers\`. VƒÉn b·∫£n c·ªßa (c√°c) c√¢u tr·∫£ l·ªùi n√†y ph·∫£i **KH·ªöP CH√çNH X√ÅC** v·ªõi vƒÉn b·∫£n c·ªßa t√πy ch·ªçn t∆∞∆°ng ·ª©ng.
    *   **Ch·∫•t l∆∞·ª£ng:** C√°c l·ª±a ch·ªçn sai (distractors) ph·∫£i h·ª£p l√Ω v√† ph·ªï bi·∫øn ƒë·ªÉ th·ª±c s·ª± ki·ªÉm tra s·ª± hi·ªÉu bi·∫øt.
    *   **Gi·∫£i th√≠ch:** Cung c·∫•p m·ªôt l·ªùi gi·∫£i th√≠ch r√µ r√†ng v√† s√∫c t√≠ch cho c√¢u tr·∫£ l·ªùi ƒë√∫ng.

4.  **T·∫°o C√°c Ho·∫°t ƒê·ªông H·ªçc T·∫≠p Kh√°c:**
    *   **ƒêi·ªÅn v√†o ch·ªó tr·ªëng:** T·∫°o 5-7 c√¢u h·ªèi ƒëi·ªÅn v√†o ch·ªó tr·ªëng t·∫≠p trung v√†o c√°c thu·∫≠t ng·ªØ, gi√° tr·ªã ho·∫∑c kh√°i ni·ªám quan tr·ªçng.
    *   **Thu·∫≠t ng·ªØ:** X√¢y d·ª±ng m·ªôt danh s√°ch c√°c thu·∫≠t ng·ªØ quan tr·ªçng v√† ƒë·ªãnh nghƒ©a c·ªßa ch√∫ng.

5.  **Ngu·ªìn ch√≠nh:** Lu√¥n coi n·ªôi dung c·ªßa ng∆∞·ªùi d√πng l√† ngu·ªìn th√¥ng tin c·ªët l√µi. Kh√¥ng thay ƒë·ªïi √Ω nghƒ©a ho·∫∑c th√¥ng tin c∆° b·∫£n. B·∫°n ch·ªâ l√†m gi√†u v√† t√°i c·∫•u tr√∫c n√≥.`;

        if (source.file) {
            const filePart = {
                inlineData: {
                    data: source.file.data,
                    mimeType: source.file.mimeType,
                },
            };
            const textPart = {
                text: `${basePrompt}${source.text ? `\n\nD∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·∫ßn x·ª≠ l√Ω. H∆∞·ªõng d·∫´n b·ªï sung t·ª´ ng∆∞·ªùi d√πng: "${source.text}"` : '\n\nD∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·∫ßn x·ª≠ l√Ω.'}`
            };
            contents = { parts: [filePart, textPart] };
        } else {
            contents = `${basePrompt}\n\nD∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·∫ßn x·ª≠ l√Ω: "${source.text}"`;
        }
        
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: contents,
            config: {
                responseMimeType: "application/json",
                responseSchema: studyPackSchema,
            },
        });

        const jsonString = response.text?.trim() ?? '';
        if (!jsonString) {
            throw new Error("Received empty response from Gemini API.");
        }
        const generatedPack = JSON.parse(jsonString);
        
        // Additional validation to prevent malformed data from reaching the UI
        if (generatedPack.quiz) {
            generatedPack.quiz = (generatedPack.quiz as any[]).filter(q => 
                q.question &&
                q.options && Array.isArray(q.options) && q.options.length > 0 &&
                q.correctAnswers && Array.isArray(q.correctAnswers) && q.correctAnswers.length > 0 &&
                q.correctAnswers.every((ans: string) => q.options.includes(ans))
            );
        }

        return generatedPack as Partial<StudyPack>;
    } catch (error) {
        console.error("Error generating study pack with Gemini:", error);
        useUIStore.getState().showToast("L·ªói: Kh√¥ng th·ªÉ t·∫°o g√≥i h·ªçc t·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.");
        throw error;
    }
};

export const askTutor = async (context: string, userQuestion: string, questionContext?: string): Promise<string> => {
     if (!apiKey) {
        await new Promise(res => setTimeout(res, 800));
        return `### ƒê√¢y l√† c√¢u tr·∫£ l·ªùi m·∫´u
Ph·∫£n h·ªìi m·∫´u: D·ª±a tr√™n b·ªëi c·∫£nh c·ªßa b√†i h·ªçc, c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ **"${userQuestion}"** c√≥ th·ªÉ ƒë∆∞·ª£c tr·∫£ l·ªùi nh∆∞ sau:
*ƒê√¢y l√† m·ªôt c√¢u tr·∫£ l·ªùi gi·ªØ ch·ªó.* Gia s∆∞ AI th∆∞·ªùng s·∫Ω cung c·∫•p m·ªôt l·ªùi gi·∫£i th√≠ch chi ti·∫øt, nh·∫≠n bi·∫øt ng·ªØ c·∫£nh ·ªü ƒë√¢y. ==Th√¥ng tin n√†y ƒë∆∞·ª£c l√†m n·ªïi b·∫≠t== v√† __ph·∫ßn n√†y ƒë∆∞·ª£c g·∫°ch ch√¢n__.`;
    }

    try {
        let prompt = `B·∫°n l√† m·ªôt Gia s∆∞ Y khoa AI. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch r√µ r√†ng, ng·∫Øn g·ªçn v√† h·ªØu √≠ch, d·ª±a tr√™n b·ªëi c·∫£nh ƒë∆∞·ª£c cung c·∫•p.
        **QUAN TR·ªåNG**: H√£y s·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n. C·ª• th·ªÉ:
        - S·ª≠ d·ª•ng \`# \`, \`## \`, v√† \`### \` cho c√°c c·∫•p ƒë·ªô ti√™u ƒë·ªÅ kh√°c nhau ƒë·ªÉ c·∫•u tr√∫c c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n.
        - S·ª≠ d·ª•ng \`**text**\` ƒë·ªÉ **in ƒë·∫≠m** c√°c thu·∫≠t ng·ªØ y khoa ho·∫∑c c√°c ƒëi·ªÉm ch√≠nh.
        - S·ª≠ d·ª•ng \`*text*\` ƒë·ªÉ *in nghi√™ng* khi c·∫ßn nh·∫•n m·∫°nh.
        - S·ª≠ d·ª•ng \`__text__\` ƒë·ªÉ __g·∫°ch ch√¢n__ c√°c ph·∫ßn quan tr·ªçng.
        - S·ª≠ d·ª•ng \`==text==\` ƒë·ªÉ ==l√†m n·ªïi b·∫≠t== th√¥ng tin c·∫ßn nh·ªõ.
        - S·ª≠ d·ª•ng danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng (-) ho·∫∑c c√≥ s·ªë (1.) ƒë·ªÉ li·ªát k√™ th√¥ng tin.
        - ƒê·ªÉ tr√¨nh b√†y d·ªØ li·ªáu d·∫°ng b·∫£ng (v√≠ d·ª•: so s√°nh c√°c lo·∫°i thu·ªëc), h√£y s·ª≠ d·ª•ng c√∫ ph√°p b·∫£ng Markdown ti√™u chu·∫©n (s·ª≠ d·ª•ng d·∫•u g·∫°ch ƒë·ª©ng | v√† d·∫•u g·∫°ch ngang -).`;

        if (questionContext) {
            prompt += `\n\n**∆ØU TI√äN H√ÄNG ƒê·∫¶U:** Ng∆∞·ªùi d√πng ƒëang xem x√©t c√¢u h·ªèi tr·∫Øc nghi·ªám sau ƒë√¢y v√† ƒë√£ y√™u c·∫ßu gi·∫£i th√≠ch th√™m. H√£y t·∫≠p trung c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n v√†o vi·ªác l√†m r√µ c√°c kh√°i ni·ªám li√™n quan tr·ª±c ti·∫øp ƒë·∫øn c√¢u h·ªèi v√† l·ªùi gi·∫£i th√≠ch c·ªßa n√≥. H√£y s·ª≠ d·ª•ng b·ªëi c·∫£nh b√†i h·ªçc t·ªïng qu√°t ƒë·ªÉ b·ªï sung cho l·ªùi gi·∫£i th√≠ch c·ªßa b·∫°n n·∫øu c·∫ßn thi·∫øt.
            ---
            **C√¢u h·ªèi tr·∫Øc nghi·ªám ƒëang xem:**
            ${questionContext}
            ---`;
        }

        prompt += `\n\n**B·ªëi c·∫£nh b√†i h·ªçc t·ªïng qu√°t:**\n"${context}"`;
        prompt += `\n\n**C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:**\n"${userQuestion}"`;
        
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
        });

        return response.text ?? "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi v√†o l√∫c n√†y.";
    } catch (error) {
        console.error("Error asking tutor:", error);
        return "Xin l·ªói, t√¥i ƒë√£ g·∫∑p l·ªói khi c·ªë g·∫Øng tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n.";
    }
};

const quizItemSchema = {
    type: Type.OBJECT,
    properties: {
        question: { type: Type.STRING },
        options: { type: Type.ARRAY, items: { type: Type.STRING } },
        correctAnswers: { type: Type.ARRAY, items: { type: Type.STRING } },
        type: { type: Type.STRING, enum: ['single-choice', 'multiple-choice'] },
        explanation: { type: Type.STRING },
        difficulty: { type: Type.STRING, enum: ['Easy', 'Medium', 'Hard'] }
    },
    required: ["question", "options", "correctAnswers", "type", "explanation", "difficulty"]
};

const newQuestionsSchema = {
    type: Type.OBJECT,
    properties: {
        new_questions: {
            type: Type.ARRAY,
            description: "M·ªôt m·∫£ng g·ªìm 5 c√¢u h·ªèi tr·∫Øc nghi·ªám ho√†n to√†n m·ªõi.",
            items: quizItemSchema
        }
    },
    required: ["new_questions"]
};

export const generateMoreQuestions = async (context: string, existingQuestions: MCQ[]): Promise<Omit<MCQ, 'uniqueId'>[]> => {
    if (!apiKey) {
        await new Promise(res => setTimeout(res, 1000));
        return [
            { question: "ƒê√¢y l√† c√¢u h·ªèi m·ªõi 1?", options: ["A", "B", "C"], correctAnswers: ["A"], type: 'single-choice', explanation: "Gi·∫£i th√≠ch cho c√¢u h·ªèi m·ªõi 1.", difficulty: QuizDifficulty.EASY },
            { question: "ƒê√¢y l√† c√¢u h·ªèi m·ªõi 2 (nhi·ªÅu l·ª±a ch·ªçn)?", options: ["X", "Y", "Z", "W"], correctAnswers: ["X", "Y"], type: 'multiple-choice', explanation: "Gi·∫£i th√≠ch cho c√¢u h·ªèi m·ªõi 2.", difficulty: QuizDifficulty.HARD },
        ];
    }

    try {
        const existingQuestionsString = existingQuestions.map(q => q.question).join('\n - ');
        const prompt = `B·∫°n l√† m·ªôt chuy√™n gia bi√™n so·∫°n gi√°o tr√¨nh y khoa. D·ª±a tr√™n n·ªôi dung b√†i h·ªçc sau, h√£y t·∫°o ra 5 c√¢u h·ªèi tr·∫Øc nghi·ªám **ho√†n to√†n m·ªõi v√† kh√°c bi·ªát** v·ªõi nh·ªØng c√¢u ƒë√£ c√≥.
        
        **N·ªòI DUNG B√ÄI H·ªåC:**
        ${context}
        
        **C√ÅC C√ÇU H·ªéI ƒê√É C√ì (KH√îNG ƒê∆Ø·ª¢·ª¢C L·∫∂P L·∫†I):**
        - ${existingQuestionsString}
        
        **Y√äU C·∫¶U:**
        1.  T·∫°o ch√≠nh x√°c 5 c√¢u h·ªèi m·ªõi.
        2.  C√°c c√¢u h·ªèi ph·∫£i ƒëa d·∫°ng v·ªÅ ƒë·ªô kh√≥ (Easy, Medium, Hard).
        3.  Bao g·ªìm c·∫£ c√¢u h·ªèi m·ªôt l·ª±a ch·ªçn ('single-choice') v√† nhi·ªÅu l·ª±a ch·ªçn ('multiple-choice').
        4.  C√°c l·ª±a ch·ªçn sai ph·∫£i h·ª£p l√Ω v√† c√≥ t√≠nh th·ª≠ th√°ch.
        5.  Cung c·∫•p l·ªùi gi·∫£i th√≠ch r√µ r√†ng cho m·ªói c√¢u tr·∫£ l·ªùi ƒë√∫ng.
        6.  Tuy·ªát ƒë·ªëi kh√¥ng l·∫∑p l·∫°i √Ω t∆∞·ªüng ho·∫∑c n·ªôi dung t·ª´ c√°c c√¢u h·ªèi ƒë√£ c√≥.
        7.  **QUAN TR·ªåNG NH·∫§T:** ƒê·ªëi v·ªõi m·ªói c√¢u h·ªèi, b·∫°n B·∫ÆT BU·ªòC ph·∫£i cung c·∫•p (c√°c) c√¢u tr·∫£ l·ªùi ƒë√∫ng trong m·∫£ng \`correctAnswers\`. N·ªôi dung c·ªßa m·ªói chu·ªói trong \`correctAnswers\` ph·∫£i **KH·ªöP CH√çNH X√ÅC** v·ªõi vƒÉn b·∫£n c·ªßa m·ªôt trong c√°c t√πy ch·ªçn trong m·∫£ng \`options\`.`;

        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: newQuestionsSchema,
            },
        });

        const jsonString = response.text?.trim() ?? '';
        if (!jsonString) {
            throw new Error("Received empty response from Gemini API when generating more questions.");
        }
        const result = JSON.parse(jsonString);

        const newQuestions = (result.new_questions || []) as Omit<MCQ, 'uniqueId'>[];

        // Validate that correct answers exist, match an option, and other fields are valid.
        // This prevents broken questions from reaching the UI.
        const validatedQuestions = newQuestions.filter(q => 
            q.question && q.question.trim() !== '' &&
            q.explanation && q.explanation.trim() !== '' &&
            q.options && Array.isArray(q.options) && q.options.length >= 2 &&
            q.correctAnswers && Array.isArray(q.correctAnswers) && q.correctAnswers.length > 0 &&
            q.correctAnswers.every(ans => q.options.includes(ans))
        );

        if (validatedQuestions.length < newQuestions.length) {
            console.warn("Gemini API returned some invalid questions which were filtered out.", {
                all: newQuestions,
                valid: validatedQuestions,
            });
        }
        
        return validatedQuestions;

    } catch (error) {
        console.error("Error generating more questions with Gemini:", error);
        throw error;
    }
};